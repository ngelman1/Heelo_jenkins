// Jenkinsfile - Part 5: Options and Parameters

pipeline {
    agent any

    // 'options' block: Defines pipeline-specific options.
    options {
        // 'timestamps': Prepends timestamps to console output (very useful!).
        timestamps()
        // 'skipStagesAfterUnstable': Skips subsequent stages if a previous stage resulted in UNSTABLE.
        // skipStagesAfterUnstable()
        // 'buildDiscarder': Discard old builds to save disk space (keep only last 10 successful builds).
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    // 'parameters' block: Defines parameters that a user can provide when starting a build.
    parameters {
        string(name: 'TARGET_ENVIRONMENT', defaultValue: 'dev', description: 'Deployment environment (dev, staging, prod)')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip running tests (for quick builds)')
    }

    environment {
        APP_VERSION = '1.0.0'
        BUILD_IDENTIFIER = "#${env.BUILD_NUMBER}"
    }

    stages {
        stage('Build') {
            steps {
                echo "Building application version: ${env.APP_VERSION}"
                echo "Build ID: ${env.BUILD_IDENTIFIER}"
                sh 'echo "Simulating compilation for ${APP_VERSION}"'
            }
        }
        stage('Test') {
            // 'when' condition: This stage only runs if SKIP_TESTS parameter is false.
            when { expression { return !params.SKIP_TESTS } }
            steps {
                echo 'Running automated tests...'
                sh 'echo "Running unit and integration tests..."'
            }
        }
        stage('Deploy') {
            steps {
                echo "Initiating deployment to: ${params.TARGET_ENVIRONMENT}" // Use the parameter
                sh "echo 'Deploying version ${APP_VERSION} to ${params.TARGET_ENVIRONMENT} environment'"
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
    }
}